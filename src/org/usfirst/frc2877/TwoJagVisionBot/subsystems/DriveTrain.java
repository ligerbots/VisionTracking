// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2877.TwoJagVisionBot.subsystems;
import org.usfirst.frc2877.TwoJagVisionBot.RobotMap;
import org.usfirst.frc2877.TwoJagVisionBot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar jag1 = RobotMap.driveTrainJag1;
    CANJaguar jag2 = RobotMap.driveTrainJag2;
    RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void drive(double x, double y) {
        if (robotDrive != null) {
            //this is reversed because of the default variable names, which are moveValue and rotateValue, IN THAT ORDER.
            //since the Y controls going forward, we put Y first. If when you press up the robot turns, undo this.
//            if (Robot.driveModeIsShoot) {
                robotDrive.arcadeDrive(x, y);
                //SmartDashboard.putNumber("ArcadeDriveX", vC * x);
                //SmartDashboard.putNumber("ArcadeDriveY", vC * y);
//            } else if (!Robot.driveModeIsShoot) {
//                robotDrive41.arcadeDrive(0, vC * x);
//                SmartDashboard.putNumber("ArcadeDriveX", 0);
//                SmartDashboard.putNumber("ArcadeDriveY", vC * x);
//            }
            //Despite what the function looks like it says, you do actually want
            //arcadeDrive.(x,y), not (y,x). AAAARRRRRGH.
        }
    }
}
